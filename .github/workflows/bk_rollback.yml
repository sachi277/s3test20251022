name: (多世代バックアップ指定) S3切り戻し

on:
  workflow_dispatch:
    inputs:
      target_folder:
        description: 'ロールバックする日付フォルダ名 (例: 2025-10-22-10-30-00)。未入力の場合は最新版から復元します。'
        required: false
        default: 'latest'

jobs:
  stage-approve:
    runs-on: ubuntu-latest
    environment: stage
    steps:
      - name: Approval Job Complete
        run: echo "検証環境へのロールバックが承認されました。後続のJobが実行されます。"

  stage-rollback:
    runs-on: ubuntu-latest
    needs: stage-approve
    permissions:
      id-token: write
      contents: read

    steps:
      # --- AWS認証 ---
      - name: AWS認証情報の設定 (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      # --- ロールバック対象フォルダの特定 ---
      - name: ロールバック対象フォルダの特定
        id: determine_folder
        run: |
          TARGET="${{ github.event.inputs.target_folder }}"
          BACKUP_BUCKET=${{ secrets.BACKUP_BUCKET }}

          if [ "$TARGET" == "latest" ]; then
            echo "最新のバックアップフォルダを検索中..."
            # 時系列でソートして最新フォルダを取得
            LATEST_FOLDER=$(aws s3api list-objects-v2 \
                             --bucket $BACKUP_BUCKET \
                             --delimiter '/' \
                             --query 'reverse(sort_by(CommonPrefixes, &Prefix))[0].Prefix' \
                             --output text | tr -d '/')

            if [ -z "$LATEST_FOLDER" ] || [ "$LATEST_FOLDER" == "None" ]; then
              echo "::error::バックアップフォルダが見つかりませんでした。デプロイが一度も実行されていない可能性があります。"
              exit 1
            fi

            echo "最新フォルダが見つかりました: $LATEST_FOLDER"
            echo "ROLLBACK_FOLDER=$LATEST_FOLDER" >> $GITHUB_ENV
          else
            echo "指定されたフォルダ: $TARGET を使用します。"
            SANITIZED_TARGET=$(echo "$TARGET" | sed 's/\/$//')
            echo "ROLLBACK_FOLDER=$SANITIZED_TARGET" >> $GITHUB_ENV
          fi

      # --- バックアップフォルダ存在確認 ---
      - name: バックアップフォルダ内容確認
        run: |
          COUNT=$(aws s3 ls s3://${{ secrets.BACKUP_BUCKET }}/${{ env.ROLLBACK_FOLDER }}/ --recursive | wc -l)
          if [ "$COUNT" -eq 0 ]; then
            echo "::error::指定されたバックアップフォルダ (${env.ROLLBACK_FOLDER}) が空です。中断します。"
            exit 1
          fi

      # --- ロールバック実行 ---
      - name: バックアップフォルダから公開バケットへ復元
        run: |
          BACKUP_PATH=s3://${{ secrets.BACKUP_BUCKET }}/${{ env.ROLLBACK_FOLDER }}/
          echo "$BACKUP_PATH の内容で公開バケットを上書きします。"

          # 完全復元: --exact-timestamps でタイムスタンプ精度も保持
          # --delete で不要ファイルを削除し、一致した状態に戻す
          aws s3 sync $BACKUP_PATH s3://${{ secrets.PUBLIC_BUCKET }} --exact-timestamps --delete

      # --- CloudFrontキャッシュ無効化 (CDN利用時にコメント解除) ---
      # - name: CloudFrontキャッシュの無効化
      #   if: success() && secrets.CLOUDFRONT_DISTRIBUTION_ID != ''
      #   run: |
      #     aws cloudfront create-invalidation \
      #       --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
      #       --paths "/*"
